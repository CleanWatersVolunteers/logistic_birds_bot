import json
import tgm
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, constants, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, JobQueue, CallbackContext
##, Filters, Application, CallbackQueryHandler, CommandHandler, MessageHandler, filters

import re
from nextgis_connector import NextGIS
import datetime
import pytz

GET_NOW = lambda: datetime.datetime.utcnow().astimezone(pytz.timezone('Etc/GMT-6')).strftime("%d.%m.%Y")
GET_MAP_URL = lambda long, lat: f'https://seagull.nextgis.dev/?zoom=13&center={long}_{lat}&layers=233%2C206'

text_parse_mode = constants.ParseMode.MARKDOWN_V2

MAX_DISTANCE_LIMIT = 20 #–∫–º
EXPERIMENTAL_MODE = False  #–ø–æ–¥–∫–ª—é—á–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è experimental

text_title_start = "*_–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é_*, –Ω–∞–∂–∞–≤ –Ω–∞ '—Å–∫—Ä–µ–ø–∫—É' –Ω–∏–∂–µ\n"
text_title_continue = "*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é*, –Ω–∞–∂–∞–≤ –Ω–∞ '—Å–∫—Ä–µ–ø–∫—É' –Ω–∏–∂–µ\n"

text_req_not_found = '–í—Å—Ç—Ä–µ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòû –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á—É—Ç—å –ø–æ–∑–∂–µ\n'
text_separator = '\n' ##\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-

text_select_status = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏\n"
text_select_car = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ\n"
text_select_cargo = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞\n"

kbd_enable_location = {
    "menu_enable_location":"üõ∞ –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏"
}

kbd_sel_status = {
    "menu_not_driver":"–ò—â—É –≤–æ–¥–∏—Ç–µ–ª—è",
    "menu_driver":"–í–æ–¥–∏—Ç–µ–ª—å",
}
kbd_sel_car = {
    "menu_car_not_jeep":"–õ–µ–≥–∫–æ–≤–æ–π",
    "menu_car_jeep":"–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫",
    "menu_car_bulk":"–ì—Ä—É–∑–æ–≤–æ–π",
    "menu_cancel":"–û—Ç–º–µ–Ω–∞"
}
kbd_sel_cargo = {
    "menu_cargo_burd":"–ü—Ç–∏—Ü—ã",
    "menu_cargo_bulk":"–ì—Ä—É–∑",
    "menu_cargo_people":"–õ—é–¥–∏",
    "menu_cancel":"–û—Ç–º–µ–Ω–∞"
}

# todo add "–µ—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @sosbird_digital_team_bot"
# todo menu: –ø–æ–∏—Å–∫/–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è/–∑–∞–≤–µ—Ä—à–µ–Ω
kbd_main_menu = {
    "menu_request_close":"–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É",
    "menu_request_update":"–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫",
}

def escape_markdown(text):
    """—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –º–∞—Ä–∫–¥–∞—É–Ω–µ Telegram"""
    pattern = r"([_*~|`!\.])" ##was r"(\\[_*\[\]()~|`!\.])"
    text = re.sub(r"\\"+pattern, r"\1", text) #—Ä–∞–∑–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–≤–æ–π–Ω–æ–µ
    text = re.sub(pattern, r"\\\1", text)
    return text

def delete_olds_on_map():
    old_list = NextGIS.get_old_list()
    if old_list:
        for item in old_list:
            item_username = item["fields"]["contact_info"].replace('https://t.me/','')
            NextGIS.upd_user(item_username, {
                    "car":None,
                    "cargo_type":None,
                    "status":None,
                    "lat":0,
                    "long":0,
                    "end_route":"–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            })


def main_menu(username, key=None, message=None, debug_context=None):

    ## delete_olds_on_map()
    
    user = NextGIS.get_user(username)
    if not user:
        # todo add process
        pass

    text = f'*–í–∞—à–∞ –∑–∞—è–≤–∫–∞: * {user["status"]}, '

    if user["status"] == "–í–æ–¥–∏—Ç–µ–ª—å":
        request_status = "–ò—â—É –≤–æ–¥–∏—Ç–µ–ª—è"
        text += f'{user["car"]}\n'
    else:
        request_status = "–í–æ–¥–∏—Ç–µ–ª—å"
        text += f'{user["cargo_type"]}\n'

    max_distance_limit_text = f' –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {MAX_DISTANCE_LIMIT} –∫–º' if MAX_DISTANCE_LIMIT>0 else ''
    text += f'*–í—Å—Ç—Ä–µ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏{max_distance_limit_text}: *\n'
                                                  
    text += text_separator

    free_list = NextGIS.get_free_list(request_status, user, MAX_DISTANCE_LIMIT)
    if free_list:
        req_text=''
        date_now = GET_NOW().split('.')
        for item in free_list:
            print(f'\n[..] After get_free_list: {item=}')
            contact_info = item["fields"]["contact_info"]
            link = re.search("https://t.me/",contact_info)
            if link and item["fields"]["long"] != 0 and item["fields"]["lat"] != 0:
                map_url = GET_MAP_URL(item["fields"]["long"], item["fields"]["lat"])
                hour = item["fields"]["dt_coord"]["hour"]
                minute = item["fields"]["dt_coord"]["minute"]
                date_coord = datetime.datetime(
                    item["fields"]["dt_coord"]["year"], 
                    item["fields"]["dt_coord"]["month"], 
                    item["fields"]["dt_coord"]["day"],
                    hour,
                    minute
                )
                date_now = datetime.datetime.now()

                delta = (date_now - date_coord).total_seconds() / 3600
                if int(delta) < 12:
                    req_text += f'{request_status}'
                    if request_status == "–í–æ–¥–∏—Ç–µ–ª—å":
                        req_text += f', {item["fields"]["car"]}'
                    else:
                        req_text += f', {item["fields"]["cargo_type"]}'
                    item_username = contact_info.replace('https://t.me/','') ##issues/11
                    item_username = escape_markdown(item_username)
                    req_text += f'\n@{item_username}' 
                    if "dt_coord" in item["fields"]:
                        req_text += f' –±—ã–ª –≤ {item["fields"]["dt_coord"]["hour"]:02d}:{item["fields"]["dt_coord"]["minute"]:02d}'
                    req_text += f' [–Ω–∞ –∫–∞—Ä—Ç–µ]({map_url})'
                    
                    req_text += f' –≤ {item["dist"]}–∫–º' if item["dist"] else ''                         

                    req_text += '\n\n'
        if req_text:
            text += req_text[:-1]
            text += '\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –≤ –Ω–µ–π\. –ï—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å —Å –Ω–∏–º, —Ç–æ –∑–∞–∫—Ä–æ–π—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–ª–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ üôè'#issues/12
        else:
            text += text_req_not_found
    else:
        text = text_req_not_found
    text += text_separator
    print(f'\n\n[..] After get_free_list: {text=}')
    if "lat" in user and "long" in user:
        map_url = "https:\/\/seagull\.nextgis\.dev\/"
        if user["lat"] != 0 and user["long"] != 0:
            map_url = GET_MAP_URL(user["long"], user["lat"])
        text += f'–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ [–∫–∞—Ä—Ç–µ]({map_url})'
        text += f'\n_–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ –Ω–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @sosbird\_digital\_team\_bot _ \n'
        keyboard = tgm.make_inline_keyboard(kbd_main_menu)
    else:
        text += text_title_continue
        keyboard = None
    
    print(f'\n\nBefore end of main_menu(,,{debug_context=}): {text=}; {keyboard=}')
    return text, keyboard



def kbd_cancel_hndl(username,key=None,message=None):
    text = text_select_status
    keyboard = tgm.make_inline_keyboard(kbd_sel_status)
    return text, keyboard


def kbd_status_hndl(username,key=None,message=None):
    if not key in kbd_sel_status:
        print("\n\n[!!] Incorrect key", key, kbd_sel_status)
        return kbd_cancel_hndl(username,key,message)
    text = f'{kbd_sel_status[key]}\n'
    if key == 'menu_not_driver':
        text += text_select_cargo
        keyboard = tgm.make_inline_keyboard(kbd_sel_cargo)
    elif key == 'menu_driver':
        text += text_select_car
        keyboard = tgm.make_inline_keyboard(kbd_sel_car)
    else:
        return kbd_cancel_hndl(username,key,message)
    return text, keyboard


def kbd_car_hndl(username,key=None,message=None):
    if key in kbd_sel_car and message:
        NextGIS.upd_user(username, {
            "car":kbd_sel_car[key],
            "cargo_type":None,
            "status":message.split('\n')[0],
            "end_route":"–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        })
        res = main_menu(username, key=None,message=None, debug_context='kbd_car_hndl')
        print(f'\n\n[..] kbd_car_hndl:: after main_menu...')
    else:
        print("[!!] Incorrect key", key, kbd_sel_car)
        res = kbd_cancel_hndl(username,key,message)
    return res

def kbd_cargo_hndl(username,key=None,message=None):
    if key in kbd_sel_cargo and message:
        NextGIS.upd_user(username, {
            "car":None,
            "cargo_type":kbd_sel_cargo[key],
            "status":message.split('\n')[0],
            "end_route":"–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        })
        res = main_menu(username, key=None,message=None, debug_context='kbd_cargo_hndl')
                                                              
    else:
        print("\n[!!] Incorrect key", key, kbd_sel_cargo)
        res =  kbd_cancel_hndl(username,key,message)
    return res

def kbd_close_hndl(username,key=None,message=None):
    NextGIS.upd_user(username, {
            "car":None,
            "cargo_type":None,
            "status":None,
            "lat":0,
            "long":0,
            "end_route":"–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    })
    text = escape_markdown(message)
    text = f'RESTART\n{text}\n__–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞—è–≤–∫—É__\n\n'
    keyboard = None ##was: tgm.make_inline_keyboard(kbd_sel_status)
    return text, keyboard


async def cb_user_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = None
    is_updated_message = False
                           
    if update.edited_message:
        message = update.edited_message
        is_updated_message = True
    if not message and update.message:
        message = update.message

    if not message:
        print("\n\n[!!] Unknown error")
        return None

    username = message.from_user.username
    user = None
    if username:
        user = NextGIS.get_user(username)
        if not user:
            user = NextGIS.new_user(username)
    else:
        print("\n\n[!!] Username not found", update)

    if not user:
        print("\n\n[!!] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", username)
        text = "\n–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\!"
        await message.reply_text(text, parse_mode=text_parse_mode)
        return None

    # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –ì–ò–°
    NextGIS.upd_user(username, {
        "long":message.location.longitude,
        "lat":message.location.latitude
    })

    #ToDo experiment –∑–∞–ø—É—Å–∫ —Ç—Ä–∞—Å–ª—è—Ü–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    if EXPERIMENTAL_MODE:
        from experimental import set_geo_translation_timer
        set_geo_translation_timer(context, message)
        await update.message.reply_text(
            f"üöÄ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {context.user_data['live_period']} —Å–µ–∫—É–Ω–¥!",
            reply_markup=ReplyKeyboardRemove()
        )
        
    # —Ä–µ–∞–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not is_updated_message: #—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, –∞ –Ω–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if user["end_route"] == "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
                                                                          
            kbd_cargo_hndl
            text, keyboard = main_menu(username, key=None,message=None, debug_context='cb_user_location::if not is_updated_message')
            if text == message.text:
                print("\n\n[--] Got the same text. Skip reply")
            else:
                                                                                           
                if keyboard:
                    await message.reply_text(text, parse_mode=text_parse_mode, reply_markup=InlineKeyboardMarkup(keyboard))
                else:
                    await message.reply_text(text, parse_mode=text_parse_mode)
        else:
            print(f'\n[..] –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - –∏–ª–∏ –Ω–æ–≤—ã–π user –∏–ª–∏ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            text = text_select_status
            keyboard = tgm.make_inline_keyboard(kbd_sel_status)
                                                                  
            await message.reply_text(text, parse_mode=text_parse_mode, reply_markup=InlineKeyboardMarkup(keyboard))

    return None

async def cb_user_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    username = update["message"]["from"]["username"]
    await cb_user_register_form(username, update.message)

async def cb_user_register_form(username, source_message) -> None:
    user = NextGIS.get_user(username)

    text = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\!\n"
    if not username:
        text += f'‚ÄºÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram ‚ÄºÔ∏è'

    text += f'\n_–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –Ω–∞–º @sosbird\_digital\_team\_bot_\n\n'

    if "end_route" in user:
        if user["end_route"] == "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
            text += text_title_continue
            # todo show menu instead
        else:
            text += text_title_start
    else:
        text += text_title_start
                                                                     

    reply_markup = None
    if EXPERIMENTAL_MODE:
        keyboard = tgm.make_inline_keyboard(kbd_enable_location)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
    await source_message.reply_text(text, parse_mode=text_parse_mode, reply_markup=reply_markup)

kbd_handlers_list = {
    "menu_cancel":kbd_cancel_hndl,

    "menu_not_driver":kbd_status_hndl,
    "menu_driver":kbd_status_hndl,

    "menu_car_not_jeep":kbd_car_hndl,
    "menu_car_jeep":kbd_car_hndl,
    "menu_car_bulk":kbd_car_hndl,

    "menu_cargo_burd":kbd_cargo_hndl,
    "menu_cargo_bulk":kbd_cargo_hndl,
    "menu_cargo_people":kbd_cargo_hndl,

    "menu_request_close":kbd_close_hndl,
    "menu_request_update":main_menu,

async def cb_reaction_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    query = update.callback_query
    await query.answer()

    if query.data == 'menu_enable_location':#—ç—Ç–∞ –≤–µ—Ç–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —ç–∫–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        # –°–æ–∑–¥–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        button = KeyboardButton(
            text="üìç –¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é",
            request_location=True,
        )
        reply_markup = ReplyKeyboardMarkup(
            [[button]], 
            resize_keyboard=True, 
            one_time_keyboard=True
        )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \nüìç –¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é\n–Ω–∏–∂–µ",
            reply_markup=reply_markup
        )
        return None
    
    username = query.from_user.username
    user = NextGIS.get_user(username)
    if not user:
        user = NextGIS.new_user(username)
    if not user:
        print("[!!] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", username)
        text = "\n–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        await query.edit_message_text(text=text, parse_mode=text_parse_mode)
        return None
    
    if query.data in kbd_handlers_list.keys():
        text, keyboard = kbd_handlers_list[query.data](username=username, key=query.data, message=query.message.text)
        
        ###text = escape_markdown(text)
        ##was text = text.f('\-','-').replace('-','\-').replace('\.','.').replace('.','\.')
        text_to_compare =  text[:text.find('–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')] ##.replace('[','').replace(']','')

        old_text = update.callback_query.message.text if update.callback_query.message else ''
        ###old_text = escape_markdown(old_text)
##was old_text=old_text.replace('\-','-').replace('-','\-').replace('.','\.')
        old_text_to_compare = old_text[:old_text.find('–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')]
                                                                  

        if old_text_to_compare == text_to_compare:
            print("\n[--] Got the same text. Skip reply")
            return None
        
        ##ToDo –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞."
        if text.startswith('RESTART'):
            to_restart_bot = True
            text = text[len('RESTART'):]
        else:
            to_restart_bot = False

        if keyboard:
            await query.edit_message_text(text=text, parse_mode=text_parse_mode, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(text=text, parse_mode=text_parse_mode)

        if to_restart_bot:
            print("\n\n[/] Before await cb_user_register_form(username, update.callback_query.message)")
            await cb_user_register_form(username, update.callback_query.message)
            print("\n\n[/] After await cb_user_register_form(username, update.callback_query.message)")
        
    else:
        print(f"\n\n[!!] Got unexpected argument: {query.data=}")
    return None
